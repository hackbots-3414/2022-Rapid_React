// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;
import edu.wpi.first.wpilibj2.command.CommandBase;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.subsystems.Drivetrain;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class DriveStraigt extends CommandBase {

    private static final Logger LOG = LoggerFactory.getLogger(DriveStraigt.class);

    private double speed;
    private double distance;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
        private final Drivetrain m_drivetrain;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


    public DriveStraigt(Drivetrain subsystem) {


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        m_drivetrain = subsystem;
        addRequirements(m_drivetrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
        LOG.info("driveStraigt initialized");
        this.speed = 0;
        this.distance = 36;
        m_drivetrain.arcadeDrive(0, 0);
        m_drivetrain.resetEncoders();
        LOG.info("distance, inches: {}", this.distance);
        this.speed = Math.copySign(0.3, this.distance);
        LOG.info("speed: {}", this.speed);
        this.distance = Math.abs(this.distance / 0.001198047515388888); // converts from inches to motor ticks (wheel diameter 6.432 inches)
        LOG.info("distance, ticks: {}", this.distance);
    }
    
    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        LOG.trace("driveStraigt executed");
        m_drivetrain.arcadeDrive(speed, 0);
        LOG.trace("driveStraigt executed 2");
    }
    
    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
        LOG.info("driveStraigt ended");
        m_drivetrain.arcadeDrive(0, 0);
        m_drivetrain.resetEncoders();
    }
    
    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        LOG.trace("Average Encoder: {}\nLeft Encoder: {}\nRight Encoder: {}", m_drivetrain.getAverageEncoderPosition(), m_drivetrain.getLeftEncoderPosition(), m_drivetrain.getRightEncoderPosition());

        if (Math.abs(m_drivetrain.getAverageEncoderPosition()) <= this.distance) {
            LOG.trace("driveStraigt not finished");
            return false;
        }
        else {
            LOG.trace("driveStraigt finished");
            return true;
        }
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
