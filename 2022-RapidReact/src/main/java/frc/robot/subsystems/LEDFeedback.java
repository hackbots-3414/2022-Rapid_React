// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import frc.robot.commands.*;
import edu.wpi.first.wpilibj.AddressableLED;
import edu.wpi.first.wpilibj.AddressableLEDBuffer;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class LEDFeedback extends SubsystemBase {

    private static final Logger LOG = LoggerFactory.getLogger(LEDFeedback.class);
    public static final int LED_ARRAY_LENGTH = 9;
    private AddressableLED ledString;
    private AddressableLEDBuffer ledBuffer;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
    *
    */
    public LEDFeedback() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        ledString = new AddressableLED(9);
        ledString.setLength(LED_ARRAY_LENGTH);
        ledBuffer = new AddressableLEDBuffer(LED_ARRAY_LENGTH);
        ledString.setData(ledBuffer);
        ledString.start();
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void setSolidPurple(){
        LOG.info("SolidPurple");
        for (int i=0; i<LED_ARRAY_LENGTH; i++) {

            ledBuffer.setRGB(i, 127, 0, 255);
        }
        ledString.setData(ledBuffer);
        ledString.start();
    }
    public void setSolidBlue(){
        LOG.info("SolidBlue");
    }
    public void setSolidRed(){
        LOG.info("SolidRed");
    }
    public void setFlashBlue(){
        LOG.info("FlashBlue");
    }
    public void setFlashRed(){
        LOG.info("FlashRed");
    }
    public void setSolidGrey(){
        LOG.info("SolidGrey");
    }
    public void seFlashGrey(){
        LOG.info("FlashGrey");
    }
    public void setSolidBlack(){
        LOG.info("SolidBlack");
    }
    public void setSolidYellow(){
        LOG.info("SolidYellow");
    }
    public void setSlowFlashYellow(){
        LOG.info("SlowFlashYellow");
    }
    public void setFlashYellow(){
        LOG.info("FlashYellow");
    }
    public void setFasFlashYellow(){
        LOG.info("FastFlashYellow");
    }
    public void setSolidGreen(){
        LOG.info("SolidGreen");
    }
    public void setFlashGreen(){
        LOG.info("FlashGreen");
    }
}
