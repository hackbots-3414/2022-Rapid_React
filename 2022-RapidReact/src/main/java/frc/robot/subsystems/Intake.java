// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.I2C;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.util.Color;

import com.revrobotics.ColorSensorV3;
import com.revrobotics.ColorMatchResult;
import com.fasterxml.jackson.databind.KeyDeserializer.None;
import com.revrobotics.ColorMatch;

import frc.robot.subsystems.LEDFeedback;


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Intake extends SubsystemBase {

    private static final Logger LOG = LoggerFactory.getLogger(Intake.class);

    private final I2C.Port i2cPort = I2C.Port.kOnboard;

    private final ColorSensorV3 m_colorSensor = new ColorSensorV3(i2cPort);
    private final ColorMatch m_colorMatcher = new ColorMatch();

    private final Color kBlueTarget = new Color(0.143, 0.427, 0.429);
    private final Color kGreenTarget = new Color(0.197, 0.561, 0.240);
    private final Color kRedTarget = new Color(0.561, 0.232, 0.114);
    private final Color kYellowTarget = new Color(0.361, 0.524, 0.113);

    private final LEDFeedback lights = new LEDFeedback();
//red .45
//blue .24
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public Intake() {
        // m_colorMatcher.addColorMatch(kBlueTarget);
        // m_colorMatcher.addColorMatch(kGreenTarget);
        // m_colorMatcher.addColorMatch(kRedTarget);
        // m_colorMatcher.addColorMatch(kYellowTarget);  
        //BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

        Color detectedColor = m_colorSensor.getColor();

        double IR = m_colorSensor.getIR();

        int proximity = m_colorSensor.getProximity();
    
        SmartDashboard.putNumber("Red", detectedColor.red);
        SmartDashboard.putNumber("Green", detectedColor.green);
        SmartDashboard.putNumber("Blue", detectedColor.blue);
        SmartDashboard.putNumber("IR", IR);
        SmartDashboard.putNumber("Proximity", proximity);
if (detectedColor.red >= .33){
    lights.setColor(Color.kRed);
} else if (detectedColor.blue >= .25){
    lights.setColor(Color.kBlue);
} else {
    lights.setColor(Color.kBlack);
}
        // String colorString;
        // ColorMatchResult match = m_colorMatcher.matchClosestColor(detectedColor);

        // lights.setColor(detectedColor);
    
        // if (match.color == kBlueTarget) {
        //   colorString = "Blue";
        //   lights.setColor(Color.kBlue);
        // } else if (match.color == kRedTarget) {
        //   colorString = "Red";
        //   lights.setColor(Color.kRed);
        // } else if (match.color == kGreenTarget) {
        //   colorString = "Green";
        //   lights.setColor(Color.kGreen);
        // } else if (match.color == kYellowTarget) {
        //   colorString = "Yellow";
        //   lights.setColor(Color.kYellow);
        // } else {
        //   colorString = "Unknown";
        // }

        //SmartDashboard.putString("Color", colorString);

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

