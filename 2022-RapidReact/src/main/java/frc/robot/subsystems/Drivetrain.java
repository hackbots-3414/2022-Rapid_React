// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import frc.robot.Constants;
import frc.robot.Constants.DriveConstants;
import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import ch.qos.logback.core.encoder.Encoder;

import com.kauailabs.navx.frc.AHRS;

import edu.wpi.first.math.geometry.Pose2d;
import edu.wpi.first.math.kinematics.DifferentialDriveKinematics;
import edu.wpi.first.math.kinematics.DifferentialDriveOdometry;
import edu.wpi.first.math.kinematics.DifferentialDriveWheelSpeeds;
import edu.wpi.first.wpilibj.SPI.Port;

import java.lang.invoke.ConstantBootstraps;

import frc.robot.Constants.DriveConstants;

import com.ctre.phoenix.motorcontrol.TalonFXInvertType;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import edu.wpi.first.wpilibj.drive.DifferentialDrive;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Drivetrain extends SubsystemBase {
    private static final Logger LOG = LoggerFactory.getLogger(Drivetrain.class);

    private AHRS ahrs = new AHRS(Port.kMXP);
    private final DifferentialDriveOdometry m_odometry;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // private WPI_TalonSRX backLeft;
    // private WPI_TalonSRX backRight;
    // private WPI_TalonSRX frontLeft;
    // private WPI_TalonSRX frontRight;
    // private DifferentialDrive differentialDrive;

    private WPI_TalonFX backLeft;
    private WPI_TalonFX backRight;
    private WPI_TalonFX frontLeft;
    private WPI_TalonFX frontRight;
    private DifferentialDrive differentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
    *
    */
    public Drivetrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        backLeft = new WPI_TalonFX(DriveConstants.kLeftMotorRearPort);

        backRight = new WPI_TalonFX(DriveConstants.kRightMotorRearPort);

        frontLeft = new WPI_TalonFX(DriveConstants.kLeftMotorFrontPort);

        frontRight = new WPI_TalonFX(DriveConstants.kRightMotorFrontPort);

        differentialDrive = new DifferentialDrive(frontLeft, frontRight);
        addChild("DifferentialDrive", differentialDrive);
        differentialDrive.setSafetyEnabled(true);
        differentialDrive.setExpiration(0.1);
        differentialDrive.setMaxOutput(1.0); 

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        resetEncoders();
        m_odometry = new DifferentialDriveOdometry(ahrs.getRotation2d());

        frontLeft.setInverted(true);
        backLeft.setInverted(true);
        backRight.follow(frontRight);
        backLeft.follow(frontLeft);
        frontRight.setSensorPhase(true);
        frontLeft.setSensorPhase(true);
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        m_odometry.update(ahrs.getRotation2d(), getLeftEncoderDistance(), getRightEncoderDistance());

    }

    public DifferentialDriveOdometry getOdometry() {
        return this.m_odometry;
    }

    public Pose2d getPose() {
        LOG.trace("Pose - Translation: {}, X: {}, Y: {}, Rotation: {}, Pose: {}", m_odometry.getPoseMeters().getTranslation(), m_odometry.getPoseMeters().getX(), m_odometry.getPoseMeters().getY(), m_odometry.getPoseMeters().getRotation(), m_odometry.getPoseMeters().toString());
        return m_odometry.getPoseMeters();
    }

    public void resetOdometry(Pose2d pose) {
        LOG.trace("Pre-Reset Encoders - Backleft: {}, Backright: {}, Frontleft: {}, Frontright: {}", backLeft.getSelectedSensorPosition(), backRight.getSelectedSensorPosition(), frontLeft.getSelectedSensorPosition(), frontRight.getSelectedSensorPosition());
        resetEncoders();
        LOG.trace("Post-Reset Encoders - Backleft: {}, Backright: {}, Frontleft: {}, Frontright: {}", backLeft.getSelectedSensorPosition(), backRight.getSelectedSensorPosition(), frontLeft.getSelectedSensorPosition(), frontRight.getSelectedSensorPosition());
        m_odometry.resetPosition(pose, ahrs.getRotation2d());
    }

    public DifferentialDriveWheelSpeeds getWheelSpeeds() {
        return new DifferentialDriveWheelSpeeds(getLeftMetersPerSecond(), getRightMetersPerSecond());
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    public double getAverageEncoderPosition() {
        return (getLeftEncoderPosition() + getRightEncoderPosition()) / 2;
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void arcadeDrive(double throttle, double steering) {
        differentialDrive.arcadeDrive(throttle, steering);
    }

    public void tankDriveVolts(double leftVolts, double rightVolts) {
        frontLeft.setVoltage(leftVolts);
        frontRight.setVoltage(rightVolts);
    }

    public void tankDrive(double leftSpeed, double rightSpeed) {
        differentialDrive.tankDrive(leftSpeed, rightSpeed);
    }

    public void resetHeading() {
        LOG.info("Reseting Heading...");
        ahrs.reset();
    }

    public double getHeading() {
        double angle = ahrs.getYaw();
        LOG.info("NavX Heading: {}", angle);
        return angle;
    }

    public void stopDriving() {
        tankDrive(0, 0);
    }

    public double getLeftEncoderPosition() {
        LOG.trace("LeftEncoderPosition: {}", frontLeft.getSelectedSensorPosition());
        return frontLeft.getSelectedSensorPosition();
    }

    public double getLeftEncoderDistance() {
        LOG.trace("LeftEncoderDistance: {}", getLeftEncoderPosition() * DriveConstants.testChassisDistancePerTick);
        return getLeftEncoderPosition() * DriveConstants.testChassisDistancePerTick;
    }

    public double getLeftMetersPerSecond() {
        LOG.trace("LeftMetersPerSecond: {}", frontLeft.getSelectedSensorVelocity());
        return frontLeft.getSelectedSensorVelocity() * DriveConstants.testChassisDistancePerTick * Constants.kMotorToWheelGearRatio;
    }

    public double getRightEncoderPosition() {
        LOG.trace("RightEncoderPosition: {}", frontRight.getSelectedSensorPosition());
        return frontRight.getSelectedSensorPosition();
    }

    public double getRightEncoderDistance() {
        LOG.trace("RightEncoderDistance: {}", getRightEncoderPosition() * DriveConstants.testChassisDistancePerTick);
        return getRightEncoderPosition() * DriveConstants.testChassisDistancePerTick;
    }

    public double getRightMetersPerSecond() {
        LOG.trace("RightMetersPerSecond: {}", frontRight.getSelectedSensorVelocity());
        return frontRight.getSelectedSensorVelocity() * DriveConstants.testChassisDistancePerTick * 10;
    }

    public void resetEncoders() {
        frontLeft.setSelectedSensorPosition(0);
        frontRight.setSelectedSensorPosition(0);
        backRight.setSelectedSensorPosition(0);
        backLeft.setSelectedSensorPosition(0);
    }

    public void setMaxOutput(double maxOutput) {
        differentialDrive.setMaxOutput(maxOutput);
    }

    public double getTurnRate() {
        return -ahrs.getRate();
    }
}
